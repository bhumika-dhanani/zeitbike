<?php
class IWD_BirthdayCoupon_Model_Coupongenerator extends Mage_Core_Model_Abstract
{
    public function generateCoupon($ruleId, $expirationDate = null)
    {
        if (!$ruleId)
            return null;

        $coupon = Mage::getModel('salesrule/coupon');
        $code = $this->getCouponCode();
        $coupon->setRuleId($ruleId)
            ->setCode($code)
            ->setUsageLimit(1)
            ->setUsagePerCustomer(1)
            ->setExpirationDate($expirationDate)
            ->setIsPrimary(null)
            ->setCreatedAt(time())
            ->setType(IWD_BirthdayCoupon_Helper_Coupons::COUPON_TYPE_SPECIFIC_AUTOGENERATED)
            ->save();

        return $coupon;
    }

    protected function getCouponGenerator()
    {
        $generator = Mage::getModel('iwd_coupon/massgenerator');

        $format = Mage::helper('iwd_coupon/coupons')->getDefaultFormat();
        $dash_every_x_characters = Mage::helper('iwd_coupon/coupons')->getDefaultDashInterval();
        $prefix = Mage::helper('iwd_coupon/coupons')->getDefaultPrefix();
        $suffix = Mage::helper('iwd_coupon/coupons')->getDefaultSuffix();
        $length = Mage::helper('iwd_coupon/coupons')->getDefaultLength();
        $separator = Mage::helper('iwd_coupon/coupons')->getCodeSeparator();

        if (!empty($format)) {
            switch (strtolower($format)) {
                case 'alphanumeric':
                case 'alphanum':
                    $generator->setFormat(IWD_BirthdayCoupon_Helper_Coupons::COUPON_FORMAT_ALPHANUMERIC);
                    break;
                case 'alphabetical':
                case 'alpha':
                    $generator->setFormat(IWD_BirthdayCoupon_Helper_Coupons::COUPON_FORMAT_ALPHABETICAL);
                    break;
                case 'numeric':
                case 'num':
                    $generator->setFormat(IWD_BirthdayCoupon_Helper_Coupons::COUPON_FORMAT_NUMERIC);
                    break;
            }
        }

        $generator->setDash(!empty($dash_every_x_characters) ? (int)$dash_every_x_characters : 4);
        $generator->setLength(!empty($length) ? (int)$length : 12);
        $generator->setPrefix(!empty($prefix) ? $prefix : '');
        $generator->setSuffix(!empty($suffix) ? $suffix : '');
        $generator->setDelimiter(!empty($separator) ? $separator : '-');

        return $generator;
    }

    protected function getCouponCode()
    {
        $generator = $this->getCouponGenerator();
        $attempts = 0;
        $code = null;
        do {
            if ($attempts++ > 100) {
                throw new Exception('Unable to create requested Coupons. Increase the number of characters for coupon code.');
            }
            $code = $generator->generateCode();
        } while ($this->exists($code));

        return $code;
    }

    public function exists($code)
    {
        $count = Mage::getModel('salesrule/coupon')
            ->getCollection()
            ->addFieldToFilter('code', $code)
            ->count();
        return ($count != 0);
    }
}